# Fix Metadata in Apple Photos Using Google Takeout

You are an experienced Python developer.

Write a script that processes metadata of photos and videos exported from Apple Photos and fixes them using data from Google Takeout JSON files.

## Constraints

- Use English for all code, comments, and output.
- Use `exiftool` or an equivalent method to modify file metadata.

## Folder Structure

- `./old`: Read-only. Contains original files from Google Takeout and their corresponding `.json` metadata files.
- `./new`: Contains Apple Photos media files to be updated. Some may have incorrect or missing metadata.
- `./src`: Source code for the script.
- `./logs`: Log files for the script.
- `./tests`: Test files for the script.

## Rules

1. For every `.json` file in `./old`, extract:
   - `photoTakenTime.timestamp` (for date fields)
   - `title` (optional)
   - GPS coordinates if present (`latitude`, `longitude`)
2. Match the `.json` file to a media file by filename (e.g., `IMG_1234.json` â†’ `IMG_1234.jpg`).
3. If the matching file exists in `./new`, update its metadata using `exiftool`:
   - `DateTimeOriginal`
   - `CreateDate`
   - `ModifyDate`
   - `Title` (optional)
   - GPS data (optional)
4. Do not move, copy, or rename any files. Modify files in-place inside `./new`.

## Output

- Only print essential information:
  - Number of total, matched, updated, and failed files.
  - Errors for debugging if any issues occur.
- Do not spam logs or console with verbose output.

## Style & Structure

- Follow modern Python best practices.
- Avoid code duplication.
- Keep the code clean, readable, and maintainable.
- Validate data before writing metadata.
- Write self-contained, minimal logic.

## Final Step (Manual)

The user will manually re-import the corrected files from `./new` into Apple Photos.

## Testing

- Add basic automated tests to a `tests/` folder.
- Focus tests on filename matching and JSON parsing logic.

## Comments

- Write short comments to clarify complex logic, but avoid excessive commenting.

## Test Setup

- Tests use a dedicated `test_images` folder in the root directory (not tests/test_images)
- The test requires Pillow and imagehash libraries for optimal image matching
- To run tests:
  1. Activate the virtual environment: `source .venv/bin/activate`
  2. Run the test: `python -m tests.test_metadata_workflow`
- The test copies sample files from the old directory to test_images/old
- It applies metadata from JSON files to images in test_images/new
- It verifies that metadata was correctly applied
- Current test uses real HEIC files from Google Takeout data
